// Build script for ts-rs TypeScript type generation

use std::env;
use std::fs;
use std::path::Path;

fn main() {
    // Standard Tauri build
    tauri_build::build();
    
    // Ensure types directory exists
    let types_dir = "../src/types";
    if !Path::new(types_dir).exists() {
        fs::create_dir_all(types_dir).expect("Failed to create types directory");
    }
    
    // Generate TypeScript types in debug builds only
    if env::var("PROFILE").unwrap_or_default() == "debug" {
        println!("cargo:rerun-if-changed=src/models/");
        
        // TypeScript type generation happens automatically via ts-rs derive macros
        // Types will be exported to src/types/ directory
        
        // Try to generate types explicitly
        generate_ts_types();
        
        println!("cargo:warning=TypeScript types will be generated to src/types/");
        println!("cargo:warning=Run 'cargo check' to update TypeScript types");
    }
}

fn generate_ts_types() {
    // Write index.ts file to export all types
    let index_content = r#"// Auto-generated TypeScript type definitions
// Generated by ts-rs from Rust code

export * from './ClaudeResponse';
export * from './ExecutionStatus';
export * from './UsageStats';
export * from './StreamChunk';
"#;
    
    let index_path = "../src/types/index.ts";
    if let Err(e) = fs::write(index_path, index_content) {
        println!("cargo:warning=Failed to write index.ts: {}", e);
    }
}
