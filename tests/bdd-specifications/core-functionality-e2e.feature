# 核心功能端到端測試 BDD 規範
# Claude Night Pilot 完整工作流程整合測試

@e2e @integration @core-workflow
功能: 核心功能端到端整合測試
  作為 Claude 自動化使用者
  我希望能夠完成完整的工作流程
  從創建 Prompt 到排程執行到查看結果

  背景:
    假設 Claude Night Pilot 應用程式已啟動
    並且 後端 Rust 服務正常運行
    並且 SQLite 資料庫已初始化
    並且 Claude CLI 整合功能已啟用

  @prompt-management @crud-operations
  場景: 完整 Prompt 生命週期管理
    假設 我在 Prompt 管理頁面
    當 我創建一個新的 Prompt
    並且 我設定以下資訊:
      | 欄位   | 值                                                    |
      | 標題   | 效能分析 Prompt                                       |
      | 內容   | @src/**/*.rs 分析 Rust 程式碼效能瓶頸並提供優化建議  |
      | 標籤   | performance, rust, optimization                       |
    那麼 Prompt 應該成功儲存到資料庫
    並且 我應該在列表中看到新建立的 Prompt
    並且 Prompt 卡片應該顯示正確的資訊

    當 我點擊執行按鈕
    那麼 系統應該調用 Claude CLI
    並且 應該顯示執行進度指示器
    並且 執行結果應該儲存到資料庫

    當 我編輯 Prompt 內容
    那麼 修改應該立即儲存
    並且 修改時間戳應該更新

    當 我刪除 Prompt
    那麼 Prompt 應該從資料庫中移除
    並且 相關的執行結果也應該被清理

  @scheduling @automation-workflow
  場景: 排程任務完整工作流程
    假設 我已經創建了一個名為 "程式碼品質檢查" 的 Prompt
    當 我切換到排程任務頁面
    並且 我創建一個新的排程任務:
      | 設定項目       | 值                    |
      | 選擇的 Prompt  | 程式碼品質檢查        |
      | Cron 表達式    | 0 9 * * 1-5          |
      | 時區           | Asia/Taipei          |
      | 重試次數       | 3                    |
    那麼 排程任務應該成功創建
    並且 應該顯示在排程任務列表中
    並且 狀態應該為 "等待中"

    當 排程時間到達時
    那麼 系統應該自動執行對應的 Prompt
    並且 執行狀態應該更新為 "運行中"
    並且 執行完成後狀態應該更新為 "已完成"

  @execution-results @monitoring
  場景: 執行結果監控和分析
    假設 我已經執行了幾個 Prompt
    當 我切換到執行結果頁面
    那麼 我應該看到所有執行記錄
    並且 每個結果應該包含:
      | 資訊項目     | 預期內容               |
      | 執行狀態     | 成功/錯誤/進行中       |
      | 執行時間     | 實際執行耗時           |
      | Token 使用   | 輸入和輸出 Token 數    |
      | 執行內容     | Claude 的回應內容      |
      | 時間戳記     | 執行開始和結束時間     |

    當 我使用狀態篩選器
    那麼 結果列表應該根據選擇的狀態過濾
    並且 篩選應該即時生效

    當 我點擊某個執行結果
    那麼 應該展開顯示詳細資訊
    包括完整的執行日誌和錯誤訊息 (如果有)

  @system-monitoring @health-checks
  場景: 系統監控和健康檢查
    假設 我在系統監控頁面
    當 我查看系統狀態資訊
    那麼 我應該看到:
      | 監控項目       | 預期資訊               |
      | Claude API     | 連線狀態和版本資訊     |
      | 資料庫狀態     | 連線狀態和記錄數量     |
      | 應用程式資訊   | 版本和建置資訊         |
      | 效能指標       | CPU、記憶體使用狀況    |

    當 我點擊 "刷新資訊" 按鈕
    那麼 所有監控數據應該更新為最新狀態
    並且 更新時間戳應該反映當前時間

    當 系統檢測到異常狀況
    那麼 應該顯示警告指示器
    並且 提供詳細的錯誤資訊和建議解決方案

  @testing-modules @core-integration
  場景: 核心模組整合測試
    假設 我在測試頁面
    當 我測試 CORE-001 ccusage API 整合模組
    並且 我點擊 "檢查使用量" 按鈕
    那麼 系統應該查詢 Claude 使用統計
    並且 應該顯示 Token 使用量和成本資訊

    當 我測試 CORE-002 安全執行系統
    並且 我輸入一個測試提示
    並且 我勾選 "啟用安全檢查"
    並且 我點擊 "執行提示" 按鈕
    那麼 系統應該進行安全性評估
    並且 應該顯示風險等級評估結果
    並且 執行過程應該被記錄到審計日誌

    當 我測試 CORE-003 自適應監控系統
    並且 我點擊 "啟動監控"
    那麼 監控系統應該開始定期檢查
    並且 監控狀態應該更新為 "運行中"

    當 我測試 CORE-004 智能排程系統
    並且 我輸入排程設定
    並且 我點擊 "建立排程"
    那麼 應該創建一個測試排程任務
    並且 應該進行效率分析

  @error-handling @resilience
  場景: 錯誤處理和系統韌性
    假設 系統正常運行
    當 Claude CLI 不可用時
    那麼 系統應該:
      | 行為                 | 預期回應                   |
      | 顯示錯誤狀態         | 清楚的錯誤指示器           |
      | 提供診斷資訊         | 詳細的錯誤原因說明         |
      | 建議解決方案         | 具體的修復步驟指導         |
      | 允許重試操作         | 重試按鈕和自動重試機制     |

    當 資料庫連線中斷時
    那麼 系統應該:
      | 行為                 | 預期回應                   |
      | 顯示連線狀態警告     | 資料庫離線指示器           |
      | 啟用離線模式         | 基本功能仍可使用           |
      | 自動重新連線         | 背景重連機制               |
      | 保護使用者資料       | 防止資料遺失               |

    當 網路連線不穩定時
    那麼 系統應該:
      | 行為                 | 預期回應                   |
      | 實施重試機制         | 指數退避重試策略           |
      | 顯示網路狀態         | 連線品質指示器             |
      | 優化請求大小         | 減少網路負載               |
      | 提供離線快取         | 重要資料本地儲存           |

  @performance @scalability
  場景: 效能和擴展性驗證
    假設 系統中已有 100 個 Prompt 和 500 個執行結果
    當 我載入各個頁面時
    那麼 載入時間應該符合效能標準:
      | 頁面類型       | 載入時間目標 | 互動回應時間 |
      | Prompt 列表    | < 500ms      | < 100ms      |
      | 執行結果       | < 800ms      | < 150ms      |
      | 系統監控       | < 300ms      | < 100ms      |
      | 排程任務       | < 400ms      | < 100ms      |

    當 系統同時處理多個執行任務時
    那麼 應該:
      | 行為                 | 預期表現                   |
      | 並發執行管理         | 最多同時執行 3 個任務      |
      | 資源使用控制         | CPU 使用率 < 80%           |
      | 記憶體管理           | 記憶體使用 < 500MB         |
      | 回應時間保持         | UI 回應時間不受影響        |

  @data-integrity @consistency
  場景: 資料完整性和一致性
    假設 我執行多個操作序列
    當 我創建、修改、刪除 Prompt
    並且 我創建、暫停、恢復排程任務
    並且 我執行多個 Prompt 並查看結果
    那麼 系統應該維持資料一致性:
      | 一致性檢查           | 驗證項目                   |
      | 外鍵關係完整性       | 所有關聯資料正確           |
      | 狀態同步性           | UI 狀態與資料庫一致        |
      | 交易原子性           | 操作完全成功或完全回滾     |
      | 並發安全性           | 多操作間不發生資料競爭     |

  @user-experience @workflow-continuity
  場景: 使用者體驗和工作流程連續性
    假設 我開始一個完整的工作流程
    當 我執行以下操作序列:
      1. 創建新的 Prompt
      2. 立即執行該 Prompt
      3. 將其設定為排程任務
      4. 查看執行結果
      5. 監控系統狀態
    那麼 整個流程應該流暢無阻:
      | 流程階段           | 使用者體驗要求             |
      | 頁面間導航         | 流暢切換，無明顯延遲       |
      | 資料即時同步       | 修改立即反映到其他頁面     |
      | 狀態回饋清晰       | 每步操作都有明確回饋       |
      | 錯誤復原簡單       | 錯誤後容易回到正常流程     |

  @backup-recovery @data-safety
  場景: 備份和恢復機制
    假設 系統運行一段時間後累積了重要資料
    當 我觸發資料備份程序
    那麼 系統應該:
      | 備份項目           | 備份內容                   |
      | Prompt 資料        | 所有使用者創建的 Prompt    |
      | 排程設定           | 所有排程任務配置           |
      | 執行歷史           | 完整的執行結果記錄         |
      | 系統配置           | 應用程式設定和偏好         |

    當 需要恢復資料時
    那麼 系統應該能夠:
      | 恢復能力           | 技術要求                   |
      | 選擇性恢復         | 可選擇特定類型資料恢復     |
      | 版本回滾           | 恢復到特定時間點的狀態     |
      | 完整性驗證         | 恢復後驗證資料完整性       |
      | 最小停機時間       | 恢復過程不影響基本功能     |