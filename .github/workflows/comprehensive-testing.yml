name: Comprehensive Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Rust 單元測試和整合測試
  rust-tests:
    name: Rust Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt
    
    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          src-tauri/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check Rust formatting
      run: cd src-tauri && cargo fmt -- --check
    
    - name: Run Clippy
      run: cd src-tauri && cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run unit tests
      run: cd src-tauri && cargo test --lib --bins
    
    - name: Run integration tests
      run: cd src-tauri && cargo test --test integration_tests
    
    - name: Run performance tests
      run: cd src-tauri && cargo test --test performance_tests -- --test-threads=1
    
    - name: Generate test coverage
      run: |
        cd src-tauri
        cargo install cargo-tarpaulin
        cargo tarpaulin --out xml --output-dir ../coverage/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/cobertura.xml
        flags: rust-tests

  # 性能基準測試
  benchmark-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          src-tauri/target/
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run benchmarks
      run: |
        cd src-tauri
        cargo bench --bench simple_performance
        cargo bench --bench cli_performance
    
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'cargo'
        output-file-path: src-tauri/target/criterion/report/index.html
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  # Frontend 測試
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint:check
    
    - name: Run TypeScript check
      run: npm run typecheck
    
    - name: Build frontend
      run: npm run build:frontend

  # E2E 測試 (Playwright)
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    services:
      # 模擬資料庫服務
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Rust (for Tauri)
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y webkit2gtk-4.0-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
    
    - name: Cache Tauri dependencies
      uses: actions/cache@v3
      with:
        path: src-tauri/target
        key: ${{ runner.os }}-tauri-${{ hashFiles('src-tauri/Cargo.lock') }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Build application for testing
      run: npm run tauri build --debug
    
    - name: Start development server
      run: npm run dev:frontend &
      env:
        CI: true
    
    - name: Wait for server to be ready
      run: npx wait-on http://localhost:8081 --timeout 60000
    
    - name: Run E2E tests
      run: npm test
      env:
        CI: true
        HEADLESS: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: e2e-test-results
        path: |
          test-results/
          playwright-report/
    
    - name: Upload E2E coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/e2e-coverage.json
        flags: e2e-tests

  # 建置測試
  build-tests:
    name: Build Tests
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y webkit2gtk-4.0-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build desktop application
      run: npm run tauri build
    
    - name: Build CLI tool
      run: npm run cli:build
    
    - name: Test CLI installation
      run: npm run cli:install
    
    - name: Verify CLI functionality
      run: |
        cnp-unified --version
        cnp-unified health --format json

  # 安全性測試
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Rust security audit
      uses: actions-rs/audit@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Run npm security audit
      run: npm audit --audit-level moderate
    
    - name: Dependency vulnerability scan
      run: |
        npm install -g @cyclonedx/bom
        cyclonedx-npm --output-file sbom.json
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: software-bill-of-materials
        path: sbom.json

  # 程式碼品質檢查
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run code complexity analysis
      run: |
        cd src-tauri
        cargo install cargo-complexity
        cargo complexity --threshold 10
    
    - name: Check commit message format
      run: npm run commitlint
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 整合測試報告
  test-report:
    name: Test Report
    runs-on: ubuntu-latest
    needs: [rust-tests, frontend-tests, e2e-tests, build-tests]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate comprehensive test report
      run: |
        echo "# 🧪 Claude Night Pilot - 測試報告" > test-report.md
        echo "" >> test-report.md
        echo "## 測試狀態總覽" >> test-report.md
        echo "" >> test-report.md
        echo "- 🦀 **Rust 測試**: ${{ needs.rust-tests.result }}" >> test-report.md
        echo "- 🌐 **前端測試**: ${{ needs.frontend-tests.result }}" >> test-report.md
        echo "- 🎭 **E2E 測試**: ${{ needs.e2e-tests.result }}" >> test-report.md
        echo "- 🏗️ **建置測試**: ${{ needs.build-tests.result }}" >> test-report.md
        echo "" >> test-report.md
        echo "## 測試覆蓋率" >> test-report.md
        echo "- 目標單元測試覆蓋率: ≥85%" >> test-report.md
        echo "- 目標整合測試覆蓋率: ≥75%" >> test-report.md
        echo "- 目標E2E測試覆蓋率: ≥90% (關鍵用戶流程)" >> test-report.md
        echo "" >> test-report.md
        echo "## 性能基準" >> test-report.md
        echo "- 啟動時間: < 3秒" >> test-report.md
        echo "- CLI響應時間: < 100ms" >> test-report.md
        echo "- 記憶體使用: < 150MB" >> test-report.md
        echo "- 資料庫查詢: < 50ms" >> test-report.md
    
    - name: Upload test report
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-test-report
        path: test-report.md

  # 效能監控
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup monitoring
      run: |
        echo "Setting up performance monitoring..."
        # 這裡可以整合效能監控工具，如 Lighthouse CI
    
    - name: Run performance tests
      run: |
        echo "Running performance regression tests..."
        # 執行效能回歸測試
    
    - name: Alert on performance regression
      if: failure()
      run: |
        echo "Performance regression detected!"
        # 可以整合 Slack 或其他通知系統